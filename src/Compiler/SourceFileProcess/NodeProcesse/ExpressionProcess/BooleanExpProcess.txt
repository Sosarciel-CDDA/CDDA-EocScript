import { Node, SyntaxKind } from "ts-morph";
import { SourceFileData } from "../../Interfaces";
import { ExpProcess, ExpProcessReturn, VoidExpProcess } from "./EPInterface";
import { checkKind, throwLog } from "../../Functions";
import { NumberExpProcess } from "./NumberExpProcess";
import { JToken } from "@/src/Utils";
import { CallExpProcess } from "./CallExpProcess";



let _processFunc:Record<number,ExpProcess|null> = {
    [SyntaxKind.BinaryExpression]:BinaryBoolExpProcess   ,//表达式
    [SyntaxKind.CallExpression]:CallBoolExpProcess       ,//调用函数
    [SyntaxKind.SemicolonToken]:VoidExpProcess           ,//分号
}

//条件判断
export function BooleanExpProcess(node: Node,sfd:SourceFileData):ExpProcessReturn{
    let out = new ExpProcessReturn();
    let func = _processFunc[node.getKind()];
    if(func==null)
        throw throwLog(node,"错误的 BooleanExpProcess 表达式");

    let result = func(node,sfd);
    out.addPreFuncList(result.getPreFuncs());
    out.setToken(result.getToken());
    return out;
}

function BinaryBoolExpProcess(node: Node,sfd:SourceFileData):ExpProcessReturn{
    checkKind(node,SyntaxKind.BinaryExpression);

    let out = new ExpProcessReturn();

    let lft = NumberExpProcess(node.getLeft(),sfd);
    let rit = NumberExpProcess(node.getRight(),sfd);
    let opera = node.getOperatorToken().getText();

    out.mergePreFunc(lft);
    out.mergePreFunc(rit);

    let obj:JToken = {};
    obj = { "math": [ lft.getToken(), opera, rit.getToken() ]};
    out.setToken(obj);
    return out;
}

function CallBoolExpProcess(node: Node,sfd:SourceFileData):ExpProcessReturn{
    checkKind(node,SyntaxKind.CallExpression);
    return CallExpProcess(node,sfd);;
}